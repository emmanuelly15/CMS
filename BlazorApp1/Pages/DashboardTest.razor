@page "/Dashboard"
@using BlazorApp1.Data
@using Api.Model.Database
@using BlazorApp1.DbServices
@using CommonModels.Model
@using BlazorApp1.Services
@using BlazorApp1.Models
@inherits OwningComponentBase<GroupsListService>
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject DashboardService DashboardService 
@inject DocumentService DocumentService
@inject AdminUserService AdminUserService

<style>
    body {
        background-color: #F9F6EE;
    }
</style>


<h1 style="font-family: Arial, Helvetica, sans-serif; color:#4682B4;">Dashboard</h1>

<b>@currentDate</b>



<div class="container-fluid">
<div class="card-deck">
<div class="row-3">
            <RadzenCard Style="width: 100%; height: 230px; padding: 0.0rem;" Fill="#F9F6EE" >
        <RadzenArcGauge Style="width: 100%; height: 200px;">
            <RadzenArcGaugeScale Step="2" Min="0" Max="20" MinorStep="2" Radius="1.3" TickPosition=@tickPosition Y="0.9" Margin="0">      
                <RadzenArcGaugeScaleValue Value=@usrobj.Count() ShowValue=@showValue Fill="#FC1050">
                <Template Context="pointer">
                    <h4>
                        <h4>Active Emails</h4>
                        @pointer.Value
                    </h4>
                </Template>
            </RadzenArcGaugeScaleValue>
        </RadzenArcGaugeScale>
    </RadzenArcGauge>
    </RadzenCard>
</div>
<div class="row-3">
            <RadzenCard Style="width: 100%; height: 230px; padding: 0.0rem;">
        <RadzenArcGauge Style="width: 100%; height: 200px;">
            <RadzenArcGaugeScale Step="2" Min="0" Max="20" MinorStep="2" Radius="1.3" TickPosition=@tickPosition Y="0.9"  Margin="0" >
                <RadzenArcGaugeScaleValue Value=@devobj.Count() ShowValue=@showValue Fill="blue">
                <Template Context="pointer">
                    <h4>
                        <h4>Active Devices</h4>
                        @pointer.Value
                    </h4>
                </Template>
            </RadzenArcGaugeScaleValue>
        </RadzenArcGaugeScale>
    </RadzenArcGauge>
    </RadzenCard>
</div>
</div>
</div>

<h2 style="font-family: Arial, Helvetica, sans-serif; color:#4682B4;">Pending Document Submissions</h2> 
<RadzenButton Text="Document Submission Page" Click=@OnButtonClick  Icon="assignment" ButtonStyle="ButtonStyle.Secondary" />
<div>
    @if (imageuploads != null)
    {
        <table class="table-bordered">
            <thead>
                <tr style="height: 30px; background-color:#336699 ; color:#FFFFFF ;">
                    <th width="30%">Email</th>
                    <th width="20%">Title</th>
                    <th width="20%">Inserted On</th>
                    <th width="20%">Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in imageuploads)
                {
                @if (@p.Status=="Pending")
                {
                    <tr>
                        <td>@p.Email</td>
                        <td>@p.Title</td>
                        <td>@p.InsertedOn</td>
                        <td>@p.Status</td>
                    </tr>
                }}
            </tbody>

        </table>
        }
</div>




@code{
     private Imageupload[] imageuploads;
     private AdminUser[] adminusers;
    private Dashboard[] dashboards;
    public DbAdminUser adminuser = new DbAdminUser();
    Dashboard dashboard = new Dashboard();
    List<UserListClass> usrobj;
    List<DeviceListClass> devobj;
    List<DocumentListClass> docobj;
    private string currentDate;
    //defining the fields that hold the data for the charts

    //load the data when the component is initialized on the screen
   bool showValue = true;
    IEnumerable<GaugeTickPosition> tickPositions = Enum.GetValues(typeof(GaugeTickPosition)).Cast<GaugeTickPosition>();
    GaugeTickPosition tickPosition = GaugeTickPosition.Inside;
    protected override async Task OnInitializedAsync()
    {
        
        //base.OnInitialized();
        usrobj = Service.usersobj();
        devobj = Service.devobj();
        docobj = Service.docobj();
        currentDate = DateTime.Now.ToString();
        //dashboards = await DashboardService.GetDashboardsAsync();
        imageuploads = await DocumentService.GetDocumentsAsync();
        adminusers = await AdminUserService.GetAdminUsersAsync();
    }
    void OnButtonClick()
    {
        NavigationManager.NavigateTo("DocumentSubmission");
    }
}