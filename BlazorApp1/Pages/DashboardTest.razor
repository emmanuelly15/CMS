@page "/dashboard"
@using BlazorApp1.Data
@using BlazorApp1.DbServices
@using CommonModels.Model
@using BlazorApp1.Services
@using BlazorApp1.Models
@inherits OwningComponentBase<GroupsListService>
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject DashboardService DashboardService 

<h1>Dashboard Test</h1>

<RadzenButton Text="It Works!" />

<div class="col-md-6">
    <div class="form-group">
        @*<input form="User" class="form-control" @bind="@device.User" />*@
        <th>-- Active Emails --</th>
        <tbody>
            @foreach (var item in usrobj.GroupBy(e => e.GetType()).OrderByDescending(s => s.Count()))
            {
                <td>@item.Count()</td>
            }
        </tbody>
    </div>
</div>

<div class="col-md-6">
    <div class="form-group">
        @*<input form="User" class="form-control" @bind="@device.User" />*@
        <th>-- Active Devices --</th>
        <tbody>
            @foreach (var devitem in devobj.GroupBy(e => e.GetType()).OrderByDescending(s => s.Count()))
            {
                <td>@devitem.Count()</td>
            }
        </tbody>
    </div>
</div>



@code{

    private Dashboard[] dashboards;
    Dashboard dashboard = new Dashboard();
    List<UserListClass> usrobj;
    List<DeviceListClass> devobj;
    //List<DocsListClass> docobj;
    //defining the fields that hold the data for the charts

    //load the data when the component is initialized on the screen
    protected override async Task OnInitializedAsync()
    {
        //base.OnInitialized();
        usrobj = Service.usersobj();
        devobj = Service.devobj();
        //dashboards = await DashboardService.GetDashboardsAsync();
    }

}