@page "/DocumentSubmission"
@layout NoMenuLayout
@using BlazorApp1.DbServices
@using CommonModels.Model
@inject DocumentService DocumentService
@inject NavigationManager NavigationManager

<style>
    body {
        background-color: #F9F6EE;
    }
</style>


<h1 style="font-family: Arial, Helvetica, sans-serif; color:#4682B4;">Document Submission</h1> <RadzenButton Text="Dashboard" Click=@OnButtonClick  Icon="dashboard" ButtonStyle="ButtonStyle.Secondary" />
<p>View documents and approve or reject the document</p>

<div>
    @if (imageuploads != null)
    {
        <table class="table-bordered">
            <thead>
                <tr style="height: 30px; background-color:#336699 ; color:#FFFFFF ;">
                    <th width="30%">Email</th>
                    <th width="20%">Title</th>
                    <th width="20%">Inserted On</th>
                    <th width="30%">File</th>
                    <th width="30%">FileFormat</th>
                    <th width="20%">Comment</th>
                    <th width="20%">Location</th>
                    <th width="20%">Status</th>
                    <th width="20%">Amount</th>
                    <th width="20%">Action</th>
                    <th >Reason</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in imageuploads)
                {
                    <tr>
                        <td>@p.Email</td>
                        <td>@p.Title</td>
                        <td>@p.InsertedOn</td>
                        <td><a href="@p.ImagePath" target="_blank"> @p.ImagePath</a></td>
                        <td>@p.FileFormat</td>
                        <td>@p.Comment</td>
                        <td>@p.Location</td>
                        <td>@p.Status</td>
                        <td>@p.Amount</td>
                        <td>
                             
                        @if (@p.Status=="Pending")
                       {
                          <td>
                        <button class="btn btn-success">
                                <span class="oi oi-check"></span>
                                <a style="color: #FFFFFF" @onclick="@(k => Approve(k,@p.Id))">Accept</a>
                        </button></td>
                           <td>
                        <button class="btn btn-danger">
                                <span class="oi oi-x"></span>
                                <a style="color: #FFFFFF" @onclick="@(k => Reject(k,@p.Id))">Reject</a>
                        </button></td>
                       }
                          
                        </td>
                        <td>
                             
                        @if (@p.Status=="Rejected" && p.Reason=="No Reason")
                       {
                          
                        <button class="btn btn-outline-secondary">
                               
                                <a @onclick="@(k => Blurry(k,@p.Id))">Blurry</a>
                        </button> 
                        <button class="btn btn-outline-secondary">
                               
                                <a @onclick="@(k => NAmountR(k,@p.Id))">Amount not shown</a>
                        </button>
                        <button class="btn btn-outline-secondary">
                               
                                <a @onclick="@(k => IInfoR(k,@p.Id))">Incorrect Information</a>
                        </button>
                        <button class="btn btn-outline-secondary">
                               
                                <a @onclick="@(k => CommentR(k,@p.Id))">No comment found</a>
                        </button>
                       }
                       @if (@p.Reason=="Blurry")
                       {
                           <p>Blurry</p>
                       }
                       @if (@p.Reason=="Amount Not Shown")
                       {
                           <p>Amount Not Shown</p>
                       }
                       @if (@p.Reason=="Incorrect Information")
                       {
                           <p>Incorrect Information</p>
                       }@if (@p.Reason=="Commment Not Shown")
                       {
                           <p>Commment Not Shown</p>
                       }
                       @if (@p.Status=="Accepted")
                       {
                           <p>No Reason</p>
                       }
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    }
</div>


@code {
    private Imageupload[] imageuploads;
    protected override async Task OnInitializedAsync()
    {
        imageuploads = await DocumentService.GetDocumentsAsync();
    }

    protected async Task Approve(MouseEventArgs args, int Id)
    {
        await DocumentService.ApproveDocumentById(Id);
        Console.WriteLine(Id);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); //Buttons to approve a document
    }

    protected async Task Reject(MouseEventArgs args, int Id)
    {
        await DocumentService.RejectDocumentById(Id);
        Console.WriteLine(Id);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); //Buttons to reject a document
    }
    protected async Task Blurry(MouseEventArgs args, int Id)
    {
        await DocumentService.BlurryRById(Id);
        Console.WriteLine(Id);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); //Buttons for giving a reason when a document is rejected.
    }protected async Task NAmountR(MouseEventArgs args, int Id)
    {
        await DocumentService.AmountRById(Id);
        Console.WriteLine(Id);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }protected async Task IInfoR(MouseEventArgs args, int Id)
    {
        await DocumentService.InfoRById(Id);
        Console.WriteLine(Id);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }protected async Task CommentR(MouseEventArgs args, int Id)
    {
        await DocumentService.CommentRById(Id);
        Console.WriteLine(Id);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    void OnButtonClick()
    {
        NavigationManager.NavigateTo("");
    }
}