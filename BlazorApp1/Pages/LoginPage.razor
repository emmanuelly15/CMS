@page "/Login"
<<<<<<< HEAD
@using BlazorApp1.Authentication
=======
@layout LoginLayout
>>>>>>> 37b89117cee59e3a6b24c8a292b8d04e5a7a9bd7
@using CommonModels.Model
@using Microsoft.JSInterop
@using BlazorApp1.Data
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<h1>Login</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" Class="form-control" @bind-Value="loginModel.email" />
                <ValidationMessage For="@(() => loginModel.email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.password" />
                <ValidationMessage For="@(() => loginModel.password)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
<<<<<<< HEAD
</div>
=======
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="adminuser.Email" placeholder="email address" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="adminuser.Password" placeholder="password" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
        <a href="/Login" class="col-3">Login</a>
    </div>

</EditForm>
>>>>>>> 37b89117cee59e3a6b24c8a292b8d04e5a7a9bd7

@code {

    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";

    private async Task HandleLogin()
    {
        ShowErrors = false;

        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/Admin");
        }
        else
        {
            Error = result.Error;
            ShowErrors = true;
        }
    }
}



<<<<<<< HEAD
=======
        return await Task.FromResult(true);
    }

    protected async override Task OnInitializedAsync()
    {
        adminuser = new AdminUser();

        claimsPrincipal = (await authenticationStateTask).Admin;

        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/index");
        }
        {
            adminuser.Email = "brad";
            adminuser.Password = "brad";
        }

    } 

    private async Task<bool> ValidateUser()
    {
        //assume that user is valid
        //call an API

        var returnedUser = await AdminUserService.Login(adminuser);

        if (returnedUser.EmailAddress != null)
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);
            NavigationManager.NavigateTo("/index");
        }
        else
        {
            LoginMesssage = "Invalid username or password";
        }

        return await Task.FromResult(true);
    }
}
>>>>>>> 37b89117cee59e3a6b24c8a292b8d04e5a7a9bd7
